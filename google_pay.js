// ‚úÖ 1Ô∏è‚É£ D√©finition de la configuration Google Pay
const baseRequest = {
  apiVersion: 2,
  apiVersionMinor: 0,
};

// ‚úÖ 2Ô∏è‚É£ V√©rification de l'environnement s√©curis√©
if (window.location.protocol !== "https:") {
  console.warn("‚ö†Ô∏è Google Pay doit √™tre utilis√© en HTTPS ! Essayez GitHub Pages ou un serveur local s√©curis√©.");
}

// ‚úÖ 3Ô∏è‚É£ Cartes et m√©thodes d'authentification autoris√©es
const allowedCardNetworks = ["VISA", "MASTERCARD"];
const allowedCardAuthMethods = ["PAN_ONLY", "CRYPTOGRAM_3DS"];

// ‚úÖ 4Ô∏è‚É£ Configuration de la tokenisation pour SumUp
const tokenizationSpecification = {
  type: "PAYMENT_GATEWAY",
  parameters: {
    gateway: "sumup",
    gatewayMerchantId: "MC797RN3", // Remplace avec ton Merchant ID SumUp
  },
};

// ‚úÖ 5Ô∏è‚É£ D√©finition des m√©thodes de paiement autoris√©es
const allowedPaymentMethods = [
  {
    type: "CARD",
    parameters: {
      allowedAuthMethods: allowedCardAuthMethods,
      allowedCardNetworks: allowedCardNetworks,
    },
    tokenizationSpecification: tokenizationSpecification,
  },
];

// ‚úÖ 6Ô∏è‚É£ D√©claration du client Google Pay (initialis√© apr√®s le chargement du SDK)
let paymentsClient = null;

// ‚úÖ 7Ô∏è‚É£ Fonction qui s'ex√©cute APRES le chargement du SDK Google Pay
function onGooglePayLoaded() {
  console.log("‚úÖ Google Pay SDK charg√© !");
  checkGooglePayAvailability();
}

// ‚úÖ 8Ô∏è‚É£ Fonction qui initialise Google Pay uniquement apr√®s le chargement du SDK
function getGooglePaymentsClient() {
  if (!window.google || !window.google.payments) {
    console.error("‚ùå L'API Google Pay n'est pas disponible !");
    return null;
  }

  if (paymentsClient === null) {
    console.log("üìå Initialisation de Google PaymentsClient...");
    try {
      paymentsClient = new google.payments.api.PaymentsClient({
        environment: "TEST",
        merchantInfo: {
          merchantName: "Louqo",
          merchantId: "BCR2DN4T777KLZBX", // Remplace avec ton vrai Merchant ID
        },
      });
    } catch (error) {
      console.error("‚ùå Erreur lors de l'initialisation de Google Pay :", error);
      return null;
    }
  }
  return paymentsClient;
}

// ‚úÖ 9Ô∏è‚É£ V√©rifier si Google Pay est disponible
function checkGooglePayAvailability() {
  console.log("üîé V√©rification de Google Pay...");

  const client = getGooglePaymentsClient();
  if (!client) {
    console.error("‚ùå Google Pay client non initialis√©.");
    return;
  }

  client
    .isReadyToPay({
      apiVersion: 2,
      apiVersionMinor: 0,
      allowedPaymentMethods: allowedPaymentMethods,
    })
    .then(function (response) {
      console.log("üîç R√©ponse Google Pay :", response);

      if (response.result) {
        console.log("‚úÖ Google Pay est disponible. Ajout du bouton...");
        displayGooglePayButton();
      } else {
        console.warn("‚ùå Google Pay non disponible sur ce navigateur.");
      }
    })
    .catch(function (err) {
      console.error("‚ùå Erreur lors de la v√©rification de Google Pay :", err);
    });
}

// ‚úÖ üîü Affichage du bouton Google Pay apr√®s confirmation de disponibilit√©
function displayGooglePayButton() {
  console.log("üìå Affichage du bouton Google Pay...");

  let container = document.getElementById("googlePayButtonContainer");

  if (!container) {
    console.error("‚ùå Conteneur du bouton Google Pay introuvable. V√©rification dans 500ms...");
    setTimeout(displayGooglePayButton, 500); // R√©essaye apr√®s 500ms
    return;
  }

  const client = getGooglePaymentsClient();
  if (!client) {
    console.error("‚ùå Google Pay client non initialis√©.");
    return;
  }

  const button = client.createButton({
    onClick: function () {
      console.log("üõí Clic sur le bouton Google Pay !");
      processGooglePayPayment();
    },
  });

  container.innerHTML = ""; // Nettoie le conteneur avant d'ajouter le bouton
  container.appendChild(button);
}

// ‚úÖ 1Ô∏è‚É£1Ô∏è‚É£ Simulation de paiement Google Pay
function processGooglePayPayment() {
  console.log("üöÄ Paiement Google Pay en cours...");

  const client = getGooglePaymentsClient();
  if (!client) {
    console.error("‚ùå Google Pay client non initialis√©.");
    return;
  }

  const paymentDataRequest = {
    ...baseRequest,
    allowedPaymentMethods: allowedPaymentMethods,
    merchantInfo: {
      merchantName: "Louqo",
      merchantId: "BCR2DN4T777KLZBX",
    },
    transactionInfo: {
      totalPriceStatus: "FINAL",
      totalPrice: "1.00", // √Ä adapter dynamiquement
      currencyCode: "EUR",
    },
  };

  client
    .loadPaymentData(paymentDataRequest)
    .then(function (paymentData) {
      console.log("‚úÖ Paiement Google Pay r√©ussi :", paymentData);
      alert("Paiement r√©ussi !");
    })
    .catch(function (err) {
      console.warn("‚ö†Ô∏è Paiement Google Pay annul√© ou √©chou√© :", err);
    });
}

// ‚úÖ Forcer l'ex√©cution apr√®s le chargement du DOM
document.addEventListener("DOMContentLoaded", function () {
  console.log("‚úÖ DOM enti√®rement charg√©, lancement de checkGooglePayAvailability...");
  checkGooglePayAvailability();
});
